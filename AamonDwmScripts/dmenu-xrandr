#!/bin/sh
#description: dmenu based multimonitor menu
#usage: dmenu-xrandr is best suited for launching from a shortcut

#example: dmenu-xrandr
#a gui menu appears asking for which resolution to apply

progname="$(expr "${0}" : '.*/\([^/]*\)')"

#variables are impractical to save complex cmds because of shell expantion
#therefore functions are required: http://mywiki.wooledge.org/BashFAQ/050
DMENU() { dmenu -p 'Monitor' -i ; }
#looks better on xft powered dmenu:
#https://bugs.launchpad.net/ubuntu/+source/suckless-tools/+bug/1093745

#looks better with a xft powered dmenu:
#https://bugs.launchpad.net/ubuntu/+source/suckless-tools/+bug/1093745
#DMENU='dmenu -p > -i -fn Bahamas-10 -nb #000000 -nf #FFFFFF -sb #000000 -sf #999999'

_usage() {
    printf "%s\\n" "Usage: ${progname} [PATTERN]"
    printf "%s\\n" "Dmenu for xrandr."
    printf "%s\\n"
    printf "%s\\n" "  -h, --help      show this message and exit"
}

_die() {
    [ -n "${1}" ] && _die_msg="${1}" || exit 1
    printf "%b%b\\n" "${_die_msg}" ", press <Enter> to exit" | DMENU
    exit 1
}

_number_of_monitors() {
    [ -z "${1}" ] && return 1
    _mlen__counter="0"
    _mlen__copy="${1}"

    while [ "${_mlen__copy}" ]; do
        _mlen__option="${_mlen__copy%%,*}"
        _mlen__counter="$((${_mlen__counter} + 1))"

        if [ X"${_mlen__option}" = X"${_mlen__copy}" ]; then
            _mlen__copy=""
        else
            _mlen__copy="${_mlen__copy#*,}"
        fi
    done

    printf "%s\\n" "${_mlen__counter}"
}

_str2lower() {
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${@}" | \
        tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'
}

_gen_rotate_opts() {
    [ -z "${1}" ] && return 1
    _gropts__monitor="${1}"
    _gropts__result=""

    _gropts__OLDIFS="$IFS"; IFS=","
    for _gropts__rotation in ${ROTATE_OPTS}; do
        case "${ACTIVE_MONITORS}" in
            *"${_gropts__monitor}"*) _gropts__result="${_gropts__result}${_gropts__monitor}.rotate.${_gropts__rotation}", ;;
        esac
    done
    IFS="${_gropts__OLDIFS}"

    printf "%s\\n" "${_gropts__result}"
}

_gen_offauto_opts() {
    [ -z "${1}" ] && return 1
    _goopts__monitor="${1}"
    _goopts__result=""
    #never turn off laptop screens
    [ X"${_goopts__monitor}" = X"LVDS1" ] && return
    [ X"${_goopts__monitor}" = X"eDP-1" ] && return

    _goopts__OLDIFS="$IFS"; IFS=","
    for _goopts__state in ${OFFAUTO_OPTS}; do
        _goopts__result="${_goopts__result}${_goopts__monitor}.${_goopts__state},"
    done

    printf "%s\\n" "${_goopts__result}"
}

_gen_resolution_opts() {
    [ -z "${1}" ] && return 1
    _gropts__monitor="$(printf "%s\\n" "${1}" | awk '{gsub("-", "_");print;}')"
    eval _gropts__available_resolutions="\$available_resolutions_in_${_gropts__monitor}"

    _gropts__OLDIFS="$IFS"; IFS=","
    for _gropts__resolution in $_gropts__available_resolutions; do
        _gropts__result="${_gropts__result}${1}.mode.${_gropts__resolution}",
    done
    IFS="${_gropts__OLDIFS}"

    printf "%s\\n" "${_gropts__result}"
}

_gen_position_opts() {
    [ -z "${1}" ] && return 1
    _gpopts__monitor="${1}"
    _gpopts__result=""

    [ "${NUMBER_OF_CONNECTED_MONITORS}" -lt "2" ] && return 1

    case "${ACTIVE_MONITORS}" in
        *"${_gpopts__monitor}"*) return 1 ;;
    esac

    _gpopts__OLDIFS="$IFS"; IFS=","
    for _gpopts__position in $POSITION_OPTS; do
        _gpopts__result="${_gpopts__result}${_gpopts__monitor}.${_gpopts__position}.${ACTIVE_MONITORS%%,*}",
    done
    IFS="${_gpopts__OLDIFS}"

    printf "%s\\n" "${_gpopts__result}"
}

_gen_mix_opts() {
    [ -z "${1}" ] && return 1
    _gmopts__monitor="${1}"
    _gmopts__result=""

    [ "${NUMBER_OF_CONNECTED_MONITORS}" -lt "2" ] && return 1

    case "${ACTIVE_MONITORS}" in
        *"${_gmopts__monitor}"*) return 1 ;;
    esac

    _gmopts__monitor="$(printf "%s\\n" "${1}" | awk '{gsub("-", "_");print;}')"
    eval _gmopts__available_resolutions="\$available_resolutions_in_${_gmopts__monitor}"
    _gmopts__positions="${POSITION_OPTS}"

    _gpopts__OLDIFS="$IFS"; IFS=","
    for _gmopts__resolution in $_gmopts__available_resolutions; do
        #comment to only provide all options to the highest resolution
        for _gmopts__position in $POSITION_OPTS; do
            _gmopts__result="${_gmopts__result}${1}.mode.${_gmopts__resolution}.${_gmopts__position}.${ACTIVE_MONITORS%%,*}",
        done
    done

    printf "%s\\n" "${_gmopts__result}"
}

_reload_wallpaper() {
    if command -v "feh" >/dev/null 2>&1; then
        if [ -f "$(minos-config wallpaper 2>/dev/null)" ]; then
            feh --bg-scale "$(minos-config wallpaper 2>/dev/null)"
        fi
    fi
}

if [ ! -t 0 ]; then
    #add input comming from pipe or file to $@
    set -- "${@}" $(cat)
fi

for arg in "${@}"; do #parse options
    case "${arg}" in
        -h|--help) _usage && exit ;;
    esac
done

if ! command -v "dmenu" >/dev/null 2>&1; then
    printf "%s\\n" "install 'dmenu' to run this program" >&2
    exit 1
elif ! command -v "xrandr" >/dev/null 2>&1; then
    _die "install 'xrandr' to run this program"
fi

xrandr_output="$(xrandr)"
all_monitors="$(printf "%s\\n" "${xrandr_output}"       | \
    awk '/^VGA|^LVDS|^HDMI|^D|^eDP/ {print $1","}' | tr -d '\n')"
connected_monitors="$(printf "%s\\n" "${xrandr_output}" | \
    awk '/ connected/  {print $1","}' | tr -d '\n')"

ACTIVE_MONITORS="$(printf "%s\\n" "${xrandr_output}"    | awk '/ connected [^(]/ {print $1","}'  | tr -d '\n')"
NUMBER_OF_CONNECTED_MONITORS="$(_number_of_monitors "${connected_monitors}")"
NUMBER_OF_ACTIVE_MONITORS="$(_number_of_monitors "${ACTIVE_MONITORS}")"
ROTATE_OPTS="normal,inverted,left,right"
OFFAUTO_OPTS="off,auto"
POSITION_OPTS="above,below,same-as,left-of,right-of"

[ -z "${connected_monitors}" ] && _die "unable to detect screen interfaces"

#create resolution variables for each monitor
OLDIFS="${IFS}"; IFS=","
for monitor in ${connected_monitors}; do
    available_resolutions="$(printf "%s\\n" "${xrandr_output}" | \
        awk '/'"${monitor}"'/ {flag=1;next} /^[A-Za-z]/{flag=0} flag {print $1","}' | \
        sort -nr | tr -d '\n')"
    monitor="$(printf "%s\\n" "${monitor}" | awk '{gsub("-", "_");print;}')"
    eval available_resolutions_in_"${monitor}"=\$available_resolutions
    available_resolutions=""
done; monitor=""

#generate options
for monitor in ${connected_monitors}; do
    #mix resolution and position entries
    options="${options}$(_gen_mix_opts "${monitor%%,*}")"
    #rotate entries
    options="${options}$(_gen_rotate_opts "${monitor%%,*}")"
    #resolution entries
    options="${options}$(_gen_resolution_opts "${monitor%%,*}")"
    #position entries
    options="${options}$(_gen_position_opts "${monitor%%,*}")"
    #off-auto entries
    [ X"${NUMBER_OF_ACTIVE_MONITORS}" = X"1" ] && continue
    options="${options}$(_gen_offauto_opts "${monitor%%,*}")"
done

#show entries for every detected device when there is no cable attached
#useful when you forget to disconnect gracesfully
if [ X"${NUMBER_OF_ACTIVE_MONITORS}" = X"1" ]; then
    for monitor in ${all_monitors}; do
        options="${options}$(_gen_offauto_opts "${monitor%%,*}")"
    done
fi
IFS="${OLDIFS}"

options="$(printf "%s\\n" "${options}" | tr ',' '\n')"
selected_option="$(printf "%b\\n" "${options}"  | DMENU)"

printf "%s\\n" "[I] selected option: ${selected_option:-none}"

[ -z "${selected_option}" ] && exit 1

cmd="xrandr --output $(printf "%s\\n" "${selected_option}" | cut -d. -f1)"
case $(printf "%s\\n" "${selected_option}" | cut -d. -f2) in
    mode)
        if [ -n "$(printf "%s\\n" "${selected_option}" | cut -d. -f4)" ]; then
            cmd="${cmd}"" --$(printf "%s\\n" "${selected_option}" | cut -d. -f2) ""$(printf "%s\\n" "${selected_option}" | cut -d. -f3)"
            cmd="${cmd}"" --$(printf "%s\\n" "${selected_option}" | cut -d. -f4) ""$(printf "%s\\n" "${selected_option}" | cut -d. -f5)"
        else
            cmd="${cmd}"" --$(printf "%s\\n" "${selected_option}" | cut -d. -f2) ""$(printf "%s\\n" "${selected_option}" | cut -d. -f3)"
        fi
        ;;
    auto|off) cmd="${cmd}"" --$(printf "%s\\n" "${selected_option}" | cut -d. -f2)" ;;
    same-as)  cmd="${cmd}"" --auto --$(printf "%s\\n" "${selected_option}" | cut -d. -f2) ""$(printf "%s\\n" "${selected_option}" | cut -d. -f3)" ;;
    *)        cmd="${cmd}"" --$(printf "%s\\n" "${selected_option}" | cut -d. -f2) ""$(printf "%s\\n" "${selected_option}" | cut -d. -f3)" ;;
esac

printf "%s\\n" "[I] exec: ${cmd}"
sh -c "${cmd}" && _reload_wallpaper
